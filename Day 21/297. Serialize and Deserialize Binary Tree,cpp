//https://leetcode.com/problems/serialize-and-deserialize-binary-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string ans = "";
        if(!root){
            return "";
        }
        queue<TreeNode* >q;
        q.push(root);
        ans += to_string(root->val) + ",";
        while(!q.empty()){
            int size = q.size();
            string topush = "";
            for(int i = 0 ; i < size; i++){
                auto temp = q.front();
                q.pop();
                if(temp->left){
                    q.push(temp->left);
                    topush += to_string(temp->left->val) + ",";
                }else{
                    topush += "#,";
                }
                
                if(temp->right){
                    q.push(temp->right);
                    topush += to_string(temp->right->val) + ",";
                }else{
                    topush += "#,";
                }
            }
            ans += topush;
        }

        return ans;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if(data.size() == 0) return NULL;

        string str;
        
        stringstream s(data);
        
        getline(s,str,',');
        
        TreeNode *root = new TreeNode(stoi(str));
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){
            TreeNode* temp = q.front();
            q.pop();

            getline(s,str,',');
            if(str == "#"){
                temp->left = NULL;
            }
            else{
                TreeNode* leftnode = new TreeNode(stoi(str));
                temp->left = leftnode;
                q.push(leftnode);
            }

            
            getline(s,str,',');
            if(str == "#"){
                temp->right = NULL;
            }
            else{
                TreeNode* rightnode = new TreeNode(stoi(str));
                temp->right = rightnode;
                q.push(rightnode);
            }
        }

        return root;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));
